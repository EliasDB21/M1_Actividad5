# -*- coding: utf-8 -*-
"""M1 - Actividad 5

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MLo9nFLwVtQXKyiL8KjmxWxvecGDDDAM

#Yamil Elias Del Blanco Chavez - A00838610- IDM

Ejercicio 1.
"""

import numpy as np, random
#Ejercicio 1 (Numpy)
# TODO-1.-Crear un vector “x” con 10 ceros y mostrarlo
x = np.zeros(10)
print(x)
# TODO-2.-Modificar el quinto elemento del vector x para que su valor sea 3.
x[4] = 3
print(x)
# TODO-3.-Crear un vector “y” con valores del 1 al 20, de 1 en 1. Utiliza la función arange.
y = np.arange(1,21,1)
print(y)
# TODO-4.- Crear un vector “z” con valores del 1 al 20, de 2 en 2.
z = np.arange(1,21,2)
print(z)
# TODO-5.- Crear una matriz w de 3x2, con valores iniciales en 0.
w = np.zeros((3,2))
print(w)
# TODO-6.- Modificar el elemento en la posición 2,2 de la matriz w para que su valor sea 5.
w[1,1] = 5
print(w)
# TODO-7.- Crear un vector de 5 elementos, con valores aleatorios enteros entre 1 y 10.
v = np.zeros(5)
for number in range(len(v)):
    v[number] = random.randint(1,10)
print(v)
# TODO-8.- Crear el arreglo x1 de la lista [1,2,3]
x1 = np.array([1,2,3])
print(x1)
# TODO-9.-  Sumar 10 a cada elemento del vector
for number in range(len(x1)):
    x1[number]+=10
print(x1)

"""Ejercicio 2."""

import pandas
#Ejercicio 2
# TODO-1.-Generar un DataFrame con los datos del archivo.
data = pandas.read_csv("titanic-1.csv")
df = pandas.DataFrame(data)
# TODO-2.Mostrar por pantalla las dimensiones del DataFrame, el número de datos que contiene, los nombres de sus columnas y filas, los tipos de datos de las columnas, las 10 primeras filas y las 10 últimas filas
print("Dimensiones:", df.shape)
print("Numero de datos:", df.size)
print("Columnas:", df.columns.tolist())
print("Índices:", df.index.tolist())
print("\nTipos de datos:")
print(df.dtypes)
print("10 primeras filas:")
print(df.head(10))
print("10 ultimas filas:")
print(df.tail(10))

# TODO-3.-Mostrar por pantalla los datos del pasajero con identificador 148.
print(df[data.PassengerId == 148])

# TODO-4.-Mostrar por pantalla las filas pares del DataFrame.
print(df.iloc[::2])

# TODO-5.-Mostrar por pantalla los nombres de las personas que iban en primera clase ordenadas alfabéticamente.
primeraClase = df[data.Pclass == 1]
primeraClase = primeraClase.sort_values(by="Name")
print(primeraClase.Name)

# TODO-6. -Mostrar por pantalla el porcentaje de personas que sobrevivieron y murieron.
total = df.shape[0]
sobrevivieron = len(df[data.Survived == 1])
print(f"Porcentaje de Sobrevivientes:{round((sobrevivieron/total)*100,2)}%")
print(f"Porcentaje de Muertos:{100-38.38}%")

#TODO-7. -Mostrar por pantalla el porcentaje de personas que sobrevivieron en cada clase.
sobrevivio = df[data.Survived == 1]
segundaClase = df[data.Pclass == 2]
terceraClase = df[data.Pclass == 3]
primerClase = sum(sobrevivio.Pclass == 1)
segundClase = sum(sobrevivio.Pclass == 2)
tercerClase = sum(sobrevivio.Pclass == 3)
print(f"Porcentaje de Sobrevivientes PrimeraClase:{round((primerClase/len(primeraClase))*100,2)}%")
print(f"Porcentaje de Sobrevivientes SegundaClase:{round((segundClase/len(segundaClase))*100,2)}%")
print(f"Porcentaje de Sobrevivientes TerceraClase:{round((tercerClase/len(terceraClase))*100,2)}%")

#TODO-8. -Eliminar del DataFrame los pasajeros con edad desconocida.
con_edad = df.dropna(subset = ["Age"])
print(con_edad)

#TODO-9. -Mostrar por pantalla la edad media de las mujeres que viajaban en cada clase.
mujeres_1 = primeraClase[primeraClase.Sex == "female"]
mujeres_2 = segundaClase[segundaClase.Sex == "female"]
mujeres_3 = terceraClase[terceraClase.Sex == "female"]
print("La edad media de primera clase:")
print(round(mujeres_1["Age"].mean(),2))
print("La edad media de segunda clase:")
print(round(mujeres_2["Age"].mean(),2))
print("La edad media de tercera clase:")
print(round(mujeres_3["Age"].mean(),2))

#TODO-10. -Añadir una nueva columna booleana para ver si el pasajero era menor de edad o no.
df["Is Minor"] = df["Age"] < 18
print(df[["Age", "Is Minor"]])

#TODO-11.-Mostrar por pantalla el porcentaje de menores y mayores de edad que sobrevivieron en cada clase.
menores_primera = df[(df.Pclass == 1) & (df.Age < 18) & (df.Survived == 1)]
mayores_primera = df[(df.Pclass == 1) & (df.Age >= 18) & (df.Survived == 1)]
total_menores_primera = df[(df.Pclass == 1) & (df.Age < 18)]
total_mayores_primera = df[(df.Pclass == 1) & (df.Age >= 18)]
menores_segunda = df[(df.Pclass == 2) & (df.Age < 18) & (df.Survived == 1)]
mayores_segunda = df[(df.Pclass == 2) & (df.Age >= 18) & (df.Survived == 1)]
total_menores_segunda = df[(df.Pclass == 2) & (df.Age < 18)]
total_mayores_segunda = df[(df.Pclass == 2) & (df.Age >= 18)]
menores_tercera = df[(df.Pclass == 3) & (df.Age < 18) & (df.Survived == 1)]
total_menores_tercera = df[(df.Pclass == 3) & (df.Age < 18)]
mayores_tercera = df[(df.Pclass == 3) & (df.Age >= 18) & (df.Survived == 1)]
total_mayores_tercera = df[(df.Pclass == 3) & (df.Age >= 18)]
print(f"Porcentaje de menores sobrevivientes clase1: {round((len(menores_primera)/len(total_menores_primera))*100,2)}")
print(f"Porcentaje de menores sobrevivientes clase2: {round((len(menores_segunda)/len(total_menores_segunda))*100,2)}")
print(f"Porcentaje de menores sobrevivientes clase3: {round((len(menores_tercera)/len(total_menores_tercera))*100,2)}")
print(f"Porcentaje de mayores sobrevivientes clase1: {round((len(mayores_primera)/len(total_mayores_primera))*100,2)}")
print(f"Porcentaje de mayores sobrevivientes clase2: {round((len(mayores_segunda)/len(total_mayores_segunda))*100,2)}")
print(f"Porcentaje de mayores sobrevivientes clase3: {round((len(mayores_tercera)/len(total_mayores_tercera))*100,2)}")

"""Ejercicio 3."""

import pandas, matplotlib.pyplot as plt
#Ejercicio 3
# TODO-1.-Generar un DataFrame con los datos del archivo.
data = pandas.read_csv("casasboston.csv")
df = pandas.DataFrame(data)
# TODO-2. Reduce el dataframe utilizando y renombrando las columnas de acuerdo a los siguiente.
columnas_seleccionadas = ["TOWN","CRIM","INDUS","CHAS","RM","MEDV","LSTAT","AGE"]
nombres_nuevos = {"TOWN":"CIUDAD","CRIM":"INDICE_CRIMEN","INDUS":"PCT_ZONA_INDUSTRIAL","CHAS":"RIO_CHARLES","RM":"N_HABITACIONES_MEDIO","MEDV":"VALOR_MEDIANO","LSTAT":"PCT_CLASE_BAJA","AGE":"EDAD"}
df_reducido = df[columnas_seleccionadas].rename(columns=nombres_nuevos)
print(df_reducido)
# TODO-3. Muestra los datos descriptivos para cada columna (conteo, media, cuartiles)
datos_descriptivos = df_reducido.describe(include="all")
print(datos_descriptivos)
# TODO-4. Genera un histograma de número de habitaciones promedio
numero_habitaciones = df_reducido["N_HABITACIONES_MEDIO"]
plt.hist(numero_habitaciones, bins =5, color = "blue")
plt.xlabel('Numero de habitaciones promedio')
plt.ylabel('Frecuencia')
plt.title('Histograma de número de habitaciones promedio')
plt.show()
# TODO-5. Genera un diagrama de dispersión que muestre el índice de criminalidad vs la zona
ciudades = df_reducido["CIUDAD"]
indice_crimen = df_reducido["INDICE_CRIMEN"]
plt.scatter(ciudades,indice_crimen,alpha=0.5, color = "blue")
plt.xlabel('Ciudades')
plt.ylabel('Indice Crimen')
plt.title('Diagrama Zona vs Indice del Crimen')
plt.show()
# TODO-6. Realiza un gráfico de barras que muestre por ciudad el valor mediano de la propiedad
valor_mediano = df_reducido["VALOR_MEDIANO"]
plt.bar(ciudades, valor_mediano)
plt.xlabel('Ciudades')
plt.ylabel('Valor Mediano de Propiedad')
plt.title('Diagrama Ciudad vs Valor Mediano de Propiedad')
plt.show()
# TODO-7. Realiza un diagrama de caja para la variable de edad
edad = df_reducido["EDAD"]
plt.boxplot(edad)
plt.ylabel('Edad')
plt.title('Diagrama de caja Edad')
plt.show()

"""Ejercicio 4."""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import random
pd.set_option('display.max.columns', 100)
# to draw pictures in jupyter notebook
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns
data = pd.read_csv("adult.data.csv")
data.head()

"""1. How many men and women (sex feature) are represented in this dataset?"""

df = pd.DataFrame(data)
hombres = sum(df.sex == "Male")
mujeres = sum(df.sex == "Female")
print(f"There are: {hombres} men and {mujeres} women")

"""2. What is the average age (age feature) of women?"""

mujeres = df[df.sex == "Female"]
mujeres_edad = mujeres["age"]
promedio_edad_mujeres = round(np.mean(mujeres_edad),2)
print(f"The average age of women is: {promedio_edad_mujeres}")

"""3. What is the percentage of German citizens (*native-country* feature)?

"""

alemanes = sum(df['native-country'] == "Germany")
porcentaje_alemanes = round((alemanes/len(df))*100,2)
print(f"El porcentaje de Alemanes es: {porcentaje_alemanes} %")

"""4-5. What are the mean and standard deviation of age for those who earn more than 50K per year (salary feature) and those who earn less than 50K per year?"""

salary_mas50k = df[df.salary == ">50K"]
salary_menos50k = df[df.salary == "<=50K"]
meanage_mas50k = round(np.mean(salary_mas50k.age),2)
meanage_menos50k = round(np.mean(salary_menos50k.age),2)
sdage_mas50k = round(np.std(salary_mas50k.age),2)
sdage_menos50k = round(np.std(salary_menos50k.age),2)
print(f"La media de edad de los que ganan mas de 50k por año es: {meanage_mas50k} y la desviación estandar es: {sdage_mas50k}")
print(f"La media de edad de los que ganan menos de 50k por año es: {meanage_menos50k} y la desviación estandar es: {sdage_menos50k}")

"""6. Is it true that people who earn more than 50K have at least high school education? (education – Bachelors, Prof-school, Assoc-acdm, Assoc-voc, Masters or Doctorate feature)"""

high_education = ["Bachelors", "Prof-school", "Assoc-acdm", "Assoc-voc", "Masters", "Doctorate"]
high_education_count = df[df["salary"] == ">50K"]["education"].isin(high_education).sum()
total_high_earners = len(df[df["salary"] == ">50K"])

print(f"Numero de personas que ganan mas de 50k con alta educación: {high_education_count}")
print(f"Numero total de personas que ganan mas de 50k: {total_high_earners}")

if high_education_count == total_high_earners:
    print("Si es verdad.")
else:
    print("No es verdad.")

"""7. Display age statistics for each race (*race* feature) and each gender (*sex* feature). Use *groupby()* and *describe()*. Find the maximum age of men of *Amer-Indian-Eskimo* race.

"""

estadisticas_edad = data.groupby(["race", "sex"])["age"].describe()
print(estadisticas_edad)

max_edad_indian_eskimo = data[(data["race"] == "Amer-Indian-Eskimo") & (data["sex"] == "Male")]["age"].max()
print(f"\nLa edad maxima de IndioAmericanos Eskimos es: {max_edad_indian_eskimo}")

"""8. What is the maximum number of hours a person works per week (hours-per-week feature)? How many people work such a number of hours, and what is the percentage of those who earn a lot (>50K) among them?"""

max_horas = df["hours-per-week"].max()
print(f"El numero máximo de horas trabajadas por semana es: {max_horas}")

personas_max_horas = len(df[df["hours-per-week"] == max_horas])
print(f"Número de personas que trabajan el máximo de horas: {personas_max_horas}")

max_horas50k = df[(df["hours-per-week"] == max_horas) & (df["salary"] == '>50K')]
porcentaje_maxhoras50k = round((len(max_horas50k) / personas_max_horas) * 100, 2)
print(f"Porcentaje de personas que trabajan el máximo de horas y ganan más de 50k: {porcentaje_maxhoras50k}%")

"""9. Find the average time of work (hours-per-week) for those who earn a little and a lot (salary) for each country (native-country). What will these be for Japan?"""

horas_promedio = data.groupby(["native-country", "salary"])["hours-per-week"].mean().rename("Horas promedio")
print(horas_promedio)

horas_promedio_Japon_50kmenos = horas_promedio.loc[("Japan", "<=50K")]
horas_promedio_Japon_50kmas = horas_promedio.loc[("Japan", ">50K")]
print(f"\nHoras promedio de trabajo en Japón para los que ganan menos de 50k: {horas_promedio_Japon_50kmenos}")
print(f"Horas promedio de trabajo en Japón para los que ganan mas de 50k: {horas_promedio_Japon_50kmas}")

"""10. Create 2 visualizations (what to plot is up to you) and write the conclusions generated with those plots from the dataset__

"""

sns.histplot(data=df, x="age", hue="salary")
plt.title("Distribución de Edad por salario")
plt.xlabel("Edad")
plt.ylabel("Frecuencia")
plt.show()
# Conclusión: Las personas que ganan mas de 50k tienden a tener edades más avanzadas.


sns.boxplot(data=df,x="salary", y="hours-per-week")
plt.title("Salario vs Horas Trabajadas por Semana")
plt.xlabel("Salario")
plt.ylabel("Horas de Trabajo por Semana")
plt.show()
# Conclusión: Las personas que ganan mas de 50k tienden a trabajar mas horas por semana. Hay personas que a pesar de trabajar mucho, no estan recibiendo salarios altos.

"""Ejercicio 5. Lab 1A"""

import numpy as np
import pandas as pd
data = pd.read_csv("customers_data.csv")
df = pd.DataFrame(data)
df.head()

"""4.Modificar nombres de columnas."""

df_corregido = df.rename(columns= {"Customer Number": "Customer_Number", "Customer Name": "Customer_Name", "Percent Growth": "Percent_Growth", "Jan Units": "Jan_Units",})
df_corregido.head()

"""5.Inspeccionar los tipos de datos por columna"""

print(df_corregido.dtypes)

"""6. Corregir ventas 2016 y 2017"""

ventas_totales = df_corregido["2016"].sum() + df_corregido["2017"].sum()
print(ventas_totales)
#Lo suma como string, entonces tenemos que corregir el tipo de dato.

años = ["2016","2017"]
if df_corregido["2016"].dtype == "object":
  for año in años:
    df_corregido[año] = df_corregido[año].str.replace("$", "")
    df_corregido[año] = df_corregido[año].str.replace(",", "")
    df_corregido[año] = df_corregido[año].astype(float)
total_ventas = (df_corregido["2016"].sum() + df_corregido["2017"].sum())
print(f"El total de ventas en 2016 y 2017 es: ${total_ventas}")

"""7.Transformar las columnas a los tipos de datos correctos"""

df_corregido["Customer_Number"] = df_corregido["Customer_Number"].astype("int64")
df_corregido["Customer_Name"] = df_corregido["Customer_Name"].astype("string")
df_corregido["2016"] = df_corregido["2016"].replace("[\$,]", '', regex=True).astype("float64")
df_corregido["2017"] = df_corregido["2017"].replace("[\$,]", '', regex=True).astype("float64")
df_corregido["Percent_Growth"] = df_corregido["Percent_Growth"].replace('%', '', regex=True).astype("float64") / 100
df_corregido["Jan_Units"] = pd.to_numeric(df_corregido["Jan_Units"], errors="coerce")
df_corregido["Active"] = df_corregido["Active"].astype(bool)
print(df_corregido.dtypes)

"""8.Agregar columna start_date"""

df_corregido["Start_Date"] = pd.to_datetime(df_corregido[["Year", "Month", "Day"]])
print(df_corregido.head())

"""9.Mostrar 3 filas de todas las columnas"""

print(df_corregido.head(3))
print(df_corregido.iloc[[1, 2], :2])

"""10.Mostrar en orden columna 2016"""

df_ascendente= df_corregido.sort_values(by="2016", ascending=True)
print(df_ascendente)

"""11.Media de 2016"""

media_2016 = df_corregido["2016"].mean()
print(f"La media de 2016 es: {round(media_2016,2)}")

"""12.Describe"""

df_corregido.describe()

"""Ejercicio 5. Lab1B"""

df = pd.read_csv("iris.csv")
print(df)

"""2."""

df["variety"] = df["variety"].astype("string")
print(df.dtypes)

"""3."""

claves = list(sns.palettes.SEABORN_PALETTES.keys())
titulos = [df.columns.tolist()]
for i in range(4):
  x = random.randint(0, 10)
  color = sns.palettes.SEABORN_PALETTES[claves[x]]
  sns.boxplot(data = df.iloc[:, i])
  plt.title(titulos[0][i])
  plt.show()

"""4."""

sns.boxplot(data = df , x ="variety", y = "sepal.width")
plt.title("Ancho del Sepal")
plt.xlabel("Especie")
plt.show()
estadistica = df.groupby("variety")["sepal.width"].agg(Q1=lambda x: x.quantile(0.25),Q3=lambda x: x.quantile(0.75),Media="mean")
print(estadistica)

"""5."""

sns.boxplot(data = df , x ="variety", y = "sepal.width")
plt.title("Ancho del Sepal")
plt.xlabel("Especie")
sns.swarmplot(data=df, x="variety", y="sepal.width")
plt.show()

"""6."""

fig,cuadros = plt.subplots(2, 2, figsize = (10,10))
sns.boxplot(data = df , x ="variety", y = "sepal.width", ax = cuadros[0, 0])
sns.boxplot(data = df , x ="variety", y = "sepal.length", ax = cuadros[0, 1])
sns.boxplot(data = df, x ="variety", y = "petal.length", ax = cuadros[1,0])
sns.boxplot(data = df, x = "variety", y = "petal.width", ax = cuadros[1,1])
cuadros[0,0].set_title("Ancho del Sepal")
cuadros[0,1].set_title("Largo del Sepal ")
cuadros[1,0].set_title("Largo del Petalo ")
cuadros[1,1].set_title("Ancho del Petalo")
plt.show()

"""7.La variable que mejor discrimina las especies es el largo de los petalos ya que en las distribuciones se encuentra mas separada una especie de la otra.

8.La variable que despliega outliers es el ancho del sepal en la especie setosa.
"""